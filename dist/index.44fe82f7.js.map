{"mappings":"MAAAA,EAAiBC,KAAKC,MAAM,+iECmB5B,MAAaC,EAAe,CAACC,EAAMC,KAEjC,MAIMC,GAHJH,EAAaI,SACZJ,EAAaI,OAASC,SAASC,cAAc,YAEzBC,WAAW,MAClCJ,EAAQD,KAAOA,EAGf,OAFgBC,EAAQK,YAAYP,GAErBQ,KAAK,EA2BhBC,EAAW,CAACC,EAASC,IACzBC,OAAOC,iBAAiBH,EAAS,MAAMI,iBAAiBH,GAoB7CI,EAAiB,CAACC,EAAU,OACvC,GAAIA,EAAU,GAAKA,EAAU,IAAK,MAAM,IAAIC,MAAM,4BAElD,MAAMC,EAAed,SAASe,eAAe,QACvCC,EAAWC,SACfZ,EAASS,EAAc,aAAaI,MAAM,OAAO,IAG7CC,EAAWC,KAAKC,MACpBb,OAAQc,YAAcN,GAAaJ,EAAU,MAGzCW,EAAWH,KAAKC,MACpBb,OAAOgB,YAjDqB,CAAC3B,IAK/B,IAAI4B,EAAa,EACbC,EAAQ,EACZ,IAAK,MAAMC,IAJT,2EAKAF,GAAc9B,EAAagC,EAAM9B,GACjC6B,IAGF,OAAON,KAAKC,MAAMI,EAAaC,EAAA,EAsC1BE,CAhCoB,EAACtB,EAAUN,SAAS6B,OAKtC,GAJYxB,EAASC,EAAS,gBAAkB,YACtCD,EAASC,EAAS,cAAgB,UAChCD,EAASC,EAAS,gBAAkB,oBA6B1BwB,CAAmBhB,IAAiB,IAGjE,OAAOM,KAAKW,KAAKR,EAAWJ,EAAA,ECvFxBa,EAAYxC,EAAAI,KAAUqC,OACtBC,EAAelC,SAASe,eAAe,QAEvCoB,EAAQnC,SAASC,cAAc,SACrCkC,EAAMC,UAAY,GAAG5C,EAAA6C,2BAErBrC,SAASsC,KAAKC,YAAYJ,GAE1B,MAAMK,EAAU,KACd,MAAMC,EAAU9B,IAGhBuB,EAAaE,UAAY,GAAG5C,EAAAI,QACzB8C,OAAOtB,KAAKW,KAAKU,EAAUT,IAC3BW,UAAU,EAAGF,EAAU,IAG5BjC,OAAOoC,iBAAiB,OAAQJ,GAIhChC,OAAOoC,iBAAiB,SAAUJ","sources":["src/config.json","src/js/main.js","src/index.js"],"sourcesContent":["{\n  \"name\": \"Nayeon\",\n  \"text\": \"Santa, tell me if you're really there Don't make me fall in love again if he won't be here Next year Santa, tell me if he really cares 'Cause I can't give it all away if he won't be here Next year Feeling Christmas all around And I'm tryin' to play it cool But it's hard to focus when I see him walking 'cross the room 'Let It Snow' is blasting out But I won't get in the mood I'm avoiding every mistletoe until I know It's true love that he thinks of So next Christmas I'm not all alone, boy Santa, tell me if you're really there Don't make me fall in love again if he won't be here Next year Santa, tell me if he really cares 'Cause I can't give it all away if he won't be here Next year I've been down this road before Fell in love on Christmas night But on New Year's Day I woke up and he wasn't by my side Now I need someone to hold Be my fire in the cold But it's hard to tell if this is just a fling Or if it's true love that he thinks of So next Christmas I'm not all alone, boy Santa, tell me if you're really there Don't make me fall in love again if he won't be here Next year Santa, tell me if he really cares 'Cause I can't give it all away if he won't be here Next year Oh, I wanna have him beside me like oh-oh-oh On the 25th by the fireplace, oh-oh-oh But I don't want a new broken heart This year I've got to be smart Oh, baby (Santa tell me) If ya won't be, (Santa tell me) if ya won't be here! (Santa tell me) Santa, tell me if you're really there (If you're really there) Don't make me fall in love again if he won't be here Next year (He won't be here next year) Santa, tell me if he really cares (Tell me babe) 'Cause I can't give it all away if he won't be here Next year (He won't be here next year) Santa, tell me if you're really there (Tell me) (Tell me baby) Don't make me fall in love again if he won't be here Next year (If he won't be, if he won't be here) Santa, tell me if he really cares (Tell me) (Do you care) 'Cause I can't give it all away if he won't be here (He won't be here next year) Next year.\",\n  \"brightness\": 0.8\n}\n","/**\n * main.js\n */\n\n/**\n * Uses `canvas.measureText` to compute and return the width of\n * the given `text` of given font in pixels.\n *\n * @param {String} text\n * The text to be rendered.\n *\n * @param {String} font\n * The CSS font descriptor that `text` is to be rendered\n * with (e.g. `bold 14px verdana`).\n *\n * @return {number} Text width\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\nexport const getTextWidth = (text, font) => {\n  // Re-use canvas object for better performance\n  const canvas =\n    getTextWidth.canvas ||\n    (getTextWidth.canvas = document.createElement('canvas'));\n\n  const context = canvas.getContext('2d');\n  context.font = font;\n  const metrics = context.measureText(text);\n\n  return metrics.width;\n};\n\n/**\n * Calculates the average character width of a particular font style.\n *\n * @param {String} font\n * The CSS font descriptor that a character is to be rendered\n * with (e.g. `bold 14px verdana`).\n *\n * @return {number} Average font style character width\n */\nconst getFontTextWidthAverage = (font) => {\n  // Test characters\n  const chars =\n    '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ .,\\'()?!\"';\n\n  let totalWidth = 0;\n  let count = 0;\n  for (const char of chars) {\n    totalWidth += getTextWidth(char, font);\n    count++;\n  }\n\n  return Math.floor(totalWidth / count);\n};\n\nconst getStyle = (element, prop) =>\n  window.getComputedStyle(element, null).getPropertyValue(prop);\n\nconst getFontDescriptors = (element = document.body) => {\n  const fontWeight = getStyle(element, 'font-weight') || 'normal';\n  const fontSize = getStyle(element, 'font-size') || '16px';\n  const fontFamily = getStyle(element, 'font-family') || 'Times New Roman';\n\n  return `${fontWeight} ${fontSize} ${fontFamily}`;\n};\n\n/**\n * Determines the maximum number of characters that can be used to\n * effectively cover the entire device width and height.\n *\n * @param {number} percent\n * An integer `1-100` representing the percentage of the screen\n * it should cover. Defaults to `100`.\n *\n * @return {number} Max characters allowed per device dimensions\n */\nexport const computeMaxChar = (percent = 100) => {\n  if (percent < 1 || percent > 100) throw new Error('Invalid fill percentage!');\n\n  const textPortrait = document.getElementById('text');\n  const fontSize = parseInt(\n    getStyle(textPortrait, 'font-size').match(/\\d+/)[0]\n  );\n\n  const maxLineY = Math.floor(\n    (window.innerHeight / fontSize) * (percent / 100)\n  );\n\n  const maxCharX = Math.floor(\n    window.innerWidth /\n      (getFontTextWidthAverage(getFontDescriptors(textPortrait)) - 1)\n  );\n\n  return Math.ceil(maxCharX * maxLineY);\n};\n","/**\n * index.js\n */\n\nimport * as data from './config.json';\nimport { computeMaxChar } from './js/main';\n\nconst textCount = data.text.length;\nconst textPortrait = document.getElementById('text');\n\nconst title = document.createElement('title');\ntitle.innerHTML = `${data.name} | CSS Text Portrait`;\n\ndocument.head.appendChild(title);\n\nconst setText = () => {\n  const maxChar = computeMaxChar();\n\n  // apply correct repeat count to text\n  textPortrait.innerHTML = `${data.text} `\n    .repeat(Math.ceil(maxChar / textCount))\n    .substring(0, maxChar + 1);\n};\n\nwindow.addEventListener('load', setText);\n\n// dynamically set text on resize/zoom to ensure\n// the entire viewport is covered with text\nwindow.addEventListener('resize', setText);\n"],"names":["$96da81c2977d8a81$exports","JSON","parse","$54b47fc030b7b21e$export$37827d046293d309","text","font","context","canvas","document","createElement","getContext","measureText","width","$54b47fc030b7b21e$var$getStyle","element","prop","window","getComputedStyle","getPropertyValue","$54b47fc030b7b21e$export$b2dc860845ffd96e","percent","Error","textPortrait","getElementById","fontSize","parseInt","match","maxLineY","Math","floor","innerHeight","maxCharX","innerWidth","totalWidth","count","char","$54b47fc030b7b21e$var$getFontTextWidthAverage","body","$54b47fc030b7b21e$var$getFontDescriptors","ceil","$35da740d59af89ba$var$textCount","length","$35da740d59af89ba$var$textPortrait","$35da740d59af89ba$var$title","innerHTML","name","head","appendChild","$35da740d59af89ba$var$setText","maxChar","repeat","substring","addEventListener"],"version":3,"file":"index.44fe82f7.js.map"}